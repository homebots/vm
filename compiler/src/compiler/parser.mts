/* eslint-disable */

import { InstructionNode, ValueType } from './types/index.mjs';

const peggyParser: { parse: any; SyntaxError: any; DefaultTracer?: any } = // Generated by Peggy 3.0.2.
  //
  // https://peggyjs.org/
  // @ts-ignore
  (function () {
    // @ts-ignore
    'use strict';

    // @ts-ignore
    function peg$subclass(child, parent) {
      // @ts-ignore
      function C() {
        this.constructor = child;
      }
      // @ts-ignore
      C.prototype = parent.prototype;
      // @ts-ignore
      child.prototype = new C();
    }

    // @ts-ignore
    function peg$SyntaxError(message, expected, found, location) {
      // @ts-ignore
      var self = Error.call(this, message);
      // istanbul ignore next Check is a necessary evil to support older environments
      // @ts-ignore
      if (Object.setPrototypeOf) {
        // @ts-ignore
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
      }
      // @ts-ignore
      self.expected = expected;
      // @ts-ignore
      self.found = found;
      // @ts-ignore
      self.location = location;
      // @ts-ignore
      self.name = 'SyntaxError';
      // @ts-ignore
      return self;
    }

    // @ts-ignore
    peg$subclass(peg$SyntaxError, Error);

    // @ts-ignore
    function peg$padEnd(str, targetLength, padString) {
      // @ts-ignore
      padString = padString || ' ';
      // @ts-ignore
      if (str.length > targetLength) {
        return str;
      }
      // @ts-ignore
      targetLength -= str.length;
      // @ts-ignore
      padString += padString.repeat(targetLength);
      // @ts-ignore
      return str + padString.slice(0, targetLength);
    }

    // @ts-ignore
    peg$SyntaxError.prototype.format = function (sources) {
      // @ts-ignore
      var str = 'Error: ' + this.message;
      // @ts-ignore
      if (this.location) {
        // @ts-ignore
        var src = null;
        // @ts-ignore
        var k;
        // @ts-ignore
        for (k = 0; k < sources.length; k++) {
          // @ts-ignore
          if (sources[k].source === this.location.source) {
            // @ts-ignore
            src = sources[k].text.split(/\r\n|\n|\r/g);
            // @ts-ignore
            break;
          }
        }
        // @ts-ignore
        var s = this.location.start;
        // @ts-ignore
        var offset_s =
          this.location.source && typeof this.location.source.offset === 'function'
            ? // @ts-ignore
              this.location.source.offset(s)
            : // @ts-ignore
              s;
        // @ts-ignore
        var loc = this.location.source + ':' + offset_s.line + ':' + offset_s.column;
        // @ts-ignore
        if (src) {
          // @ts-ignore
          var e = this.location.end;
          // @ts-ignore
          var filler = peg$padEnd('', offset_s.line.toString().length, ' ');
          // @ts-ignore
          var line = src[s.line - 1];
          // @ts-ignore
          var last = s.line === e.line ? e.column : line.length + 1;
          // @ts-ignore
          var hatLen = last - s.column || 1;
          // @ts-ignore
          str +=
            '\n --> ' +
            loc +
            '\n' +
            // @ts-ignore
            filler +
            ' |\n' +
            // @ts-ignore
            offset_s.line +
            ' | ' +
            line +
            '\n' +
            // @ts-ignore
            filler +
            ' | ' +
            peg$padEnd('', s.column - 1, ' ') +
            // @ts-ignore
            peg$padEnd('', hatLen, '^');
          // @ts-ignore
        } else {
          // @ts-ignore
          str += '\n at ' + loc;
        }
      }
      // @ts-ignore
      return str;
    };

    // @ts-ignore
    peg$SyntaxError.buildMessage = function (expected, found) {
      // @ts-ignore
      var DESCRIBE_EXPECTATION_FNS = {
        // @ts-ignore
        literal: function (expectation) {
          // @ts-ignore
          return '"' + literalEscape(expectation.text) + '"';
        },

        // @ts-ignore
        class: function (expectation) {
          // @ts-ignore
          var escapedParts = expectation.parts.map(function (part) {
            // @ts-ignore
            return Array.isArray(part)
              ? // @ts-ignore
                classEscape(part[0]) + '-' + classEscape(part[1])
              : // @ts-ignore
                classEscape(part);
          });

          // @ts-ignore
          return '[' + (expectation.inverted ? '^' : '') + escapedParts.join('') + ']';
        },

        // @ts-ignore
        any: function () {
          // @ts-ignore
          return 'any character';
        },

        // @ts-ignore
        end: function () {
          // @ts-ignore
          return 'end of input';
        },

        // @ts-ignore
        other: function (expectation) {
          // @ts-ignore
          return expectation.description;
        },
      };

      // @ts-ignore
      function hex(ch) {
        // @ts-ignore
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }

      // @ts-ignore
      function literalEscape(s) {
        // @ts-ignore
        return (
          s
            // @ts-ignore
            .replace(/\\/g, '\\\\')
            // @ts-ignore
            .replace(/"/g, '\\"')
            // @ts-ignore
            .replace(/\0/g, '\\0')
            // @ts-ignore
            .replace(/\t/g, '\\t')
            // @ts-ignore
            .replace(/\n/g, '\\n')
            // @ts-ignore
            .replace(/\r/g, '\\r')
            // @ts-ignore
            .replace(/[\x00-\x0F]/g, function (ch) {
              return '\\x0' + hex(ch);
            })
            // @ts-ignore
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
              return '\\x' + hex(ch);
            })
        );
      }

      // @ts-ignore
      function classEscape(s) {
        // @ts-ignore
        return (
          s
            // @ts-ignore
            .replace(/\\/g, '\\\\')
            // @ts-ignore
            .replace(/\]/g, '\\]')
            // @ts-ignore
            .replace(/\^/g, '\\^')
            // @ts-ignore
            .replace(/-/g, '\\-')
            // @ts-ignore
            .replace(/\0/g, '\\0')
            // @ts-ignore
            .replace(/\t/g, '\\t')
            // @ts-ignore
            .replace(/\n/g, '\\n')
            // @ts-ignore
            .replace(/\r/g, '\\r')
            // @ts-ignore
            .replace(/[\x00-\x0F]/g, function (ch) {
              return '\\x0' + hex(ch);
            })
            // @ts-ignore
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
              return '\\x' + hex(ch);
            })
        );
      }

      // @ts-ignore
      function describeExpectation(expectation) {
        // @ts-ignore
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }

      // @ts-ignore
      function describeExpected(expected) {
        // @ts-ignore
        var descriptions = expected.map(describeExpectation);
        // @ts-ignore
        var i, j;

        // @ts-ignore
        descriptions.sort();

        // @ts-ignore
        if (descriptions.length > 0) {
          // @ts-ignore
          for (i = 1, j = 1; i < descriptions.length; i++) {
            // @ts-ignore
            if (descriptions[i - 1] !== descriptions[i]) {
              // @ts-ignore
              descriptions[j] = descriptions[i];
              // @ts-ignore
              j++;
            }
          }
          // @ts-ignore
          descriptions.length = j;
        }

        // @ts-ignore
        switch (descriptions.length) {
          // @ts-ignore
          case 1:
            // @ts-ignore
            return descriptions[0];

          // @ts-ignore
          case 2:
            // @ts-ignore
            return descriptions[0] + ' or ' + descriptions[1];

          // @ts-ignore
          default:
            // @ts-ignore
            return (
              descriptions.slice(0, -1).join(', ') +
              // @ts-ignore
              ', or ' +
              // @ts-ignore
              descriptions[descriptions.length - 1]
            );
        }
      }

      // @ts-ignore
      function describeFound(found) {
        // @ts-ignore
        return found ? '"' + literalEscape(found) + '"' : 'end of input';
      }

      // @ts-ignore
      return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
    };

    // @ts-ignore
    function peg$parse(input, options) {
      // @ts-ignore
      options = options !== undefined ? options : {};

      // @ts-ignore
      var peg$FAILED = {};
      // @ts-ignore
      var peg$source = options.grammarSource;

      // @ts-ignore
      var peg$startRuleFunctions = { Program: peg$parseProgram };
      // @ts-ignore
      var peg$startRuleFunction = peg$parseProgram;

      // @ts-ignore
      var peg$c0 = 'io write';
      var peg$c1 = 'io read';
      var peg$c2 = 'io mode';
      var peg$c3 = 'io type';
      var peg$c4 = 'io all out';
      var peg$c5 = 'get';
      var peg$c6 = 'set';
      var peg$c7 = '//';
      var peg$c8 = '=';
      var peg$c9 = 'not';
      var peg$c10 = 'inc';
      var peg$c11 = 'dec';
      var peg$c12 = '>=';
      var peg$c13 = '>';
      var peg$c14 = '<=';
      var peg$c15 = '<';
      var peg$c16 = '==';
      var peg$c17 = '!=';
      var peg$c18 = 'xor';
      var peg$c19 = 'and';
      var peg$c20 = 'or';
      var peg$c21 = '+';
      var peg$c22 = '-';
      var peg$c23 = '*';
      var peg$c24 = '/';
      var peg$c25 = '%';
      var peg$c26 = 'null';
      var peg$c27 = 'halt';
      var peg$c28 = 'restart';
      var peg$c29 = 'noop';
      var peg$c30 = 'sysinfo';
      var peg$c31 = 'dump';
      var peg$c32 = 'debug';
      var peg$c33 = 'print';
      var peg$c34 = 'delay';
      var peg$c35 = 'sleep';
      var peg$c36 = 'yield';
      var peg$c37 = 'jump';
      var peg$c38 = 'to';
      var peg$c39 = '@';
      var peg$c40 = 'if';
      var peg$c41 = 'then';
      var peg$c42 = 'h';
      var peg$c43 = ',';
      var peg$c44 = 'true';
      var peg$c45 = '1';
      var peg$c46 = 'on';
      var peg$c47 = 'false';
      var peg$c48 = '0';
      var peg$c49 = 'off';
      var peg$c50 = "'";
      var peg$c51 = '0x';
      var peg$c52 = 'pin ';
      var peg$c53 = '#';
      var peg$c54 = '10';
      var peg$c55 = '11';
      var peg$c56 = '12';
      var peg$c57 = '13';
      var peg$c58 = '14';
      var peg$c59 = '15';
      var peg$c60 = '$';
      var peg$c61 = '_';
      var peg$c62 = 'input';
      var peg$c63 = 'output';
      var peg$c64 = 'open-drain';
      var peg$c65 = '2';
      var peg$c66 = 'pull-up';
      var peg$c67 = '3';
      var peg$c68 = 'byte';
      var peg$c69 = 'boolean';
      var peg$c70 = 'address';
      var peg$c71 = 'uint';
      var peg$c72 = 'int';
      var peg$c73 = 'string';

      var peg$r0 = /^[^\n]/;
      var peg$r1 = /^[0-9a-f]/;
      var peg$r2 = /^[ \t]/;
      var peg$r3 = /^[\n]/;
      var peg$r4 = /^[0-9]/;
      var peg$r5 = /^[1-9]/;
      var peg$r6 = /^[a-z]/i;
      var peg$r7 = /^[a-z0-9]/i;
      var peg$r8 = /^[a-z]/;
      var peg$r9 = /^[a-zA-Z0-9_]/;

      var peg$e0 = peg$literalExpectation('io write', false);
      var peg$e1 = peg$literalExpectation('io read', false);
      var peg$e2 = peg$literalExpectation('io mode', false);
      var peg$e3 = peg$literalExpectation('io type', false);
      var peg$e4 = peg$literalExpectation('io all out', false);
      var peg$e5 = peg$literalExpectation('get', false);
      var peg$e6 = peg$literalExpectation('set', false);
      var peg$e7 = peg$otherExpectation('statement');
      var peg$e8 = peg$otherExpectation('comment');
      var peg$e9 = peg$literalExpectation('//', false);
      var peg$e10 = peg$classExpectation(['\n'], true, false);
      var peg$e11 = peg$literalExpectation('=', false);
      var peg$e12 = peg$literalExpectation('not', false);
      var peg$e13 = peg$literalExpectation('inc', false);
      var peg$e14 = peg$literalExpectation('dec', false);
      var peg$e15 = peg$literalExpectation('>=', false);
      var peg$e16 = peg$literalExpectation('>', false);
      var peg$e17 = peg$literalExpectation('<=', false);
      var peg$e18 = peg$literalExpectation('<', false);
      var peg$e19 = peg$literalExpectation('==', false);
      var peg$e20 = peg$literalExpectation('!=', false);
      var peg$e21 = peg$literalExpectation('xor', false);
      var peg$e22 = peg$literalExpectation('and', false);
      var peg$e23 = peg$literalExpectation('or', false);
      var peg$e24 = peg$literalExpectation('+', false);
      var peg$e25 = peg$literalExpectation('-', false);
      var peg$e26 = peg$literalExpectation('*', false);
      var peg$e27 = peg$literalExpectation('/', false);
      var peg$e28 = peg$literalExpectation('%', false);
      var peg$e29 = peg$literalExpectation('null', false);
      var peg$e30 = peg$otherExpectation('value');
      var peg$e31 = peg$otherExpectation('system instruction');
      var peg$e32 = peg$literalExpectation('halt', false);
      var peg$e33 = peg$literalExpectation('restart', false);
      var peg$e34 = peg$literalExpectation('noop', false);
      var peg$e35 = peg$literalExpectation('sysinfo', false);
      var peg$e36 = peg$literalExpectation('dump', false);
      var peg$e37 = peg$literalExpectation('debug', false);
      var peg$e38 = peg$literalExpectation('print', false);
      var peg$e39 = peg$literalExpectation('delay', false);
      var peg$e40 = peg$literalExpectation('sleep', false);
      var peg$e41 = peg$literalExpectation('yield', false);
      var peg$e42 = peg$literalExpectation('jump', false);
      var peg$e43 = peg$literalExpectation('to', false);
      var peg$e44 = peg$literalExpectation('@', false);
      var peg$e45 = peg$literalExpectation('if', false);
      var peg$e46 = peg$literalExpectation('then', false);
      var peg$e47 = peg$otherExpectation('hexadecimal');
      var peg$e48 = peg$classExpectation(
        [
          ['0', '9'],
          ['a', 'f'],
        ],
        false,
        false,
      );
      var peg$e49 = peg$otherExpectation('byte hex');
      var peg$e50 = peg$otherExpectation('Byte');
      var peg$e51 = peg$literalExpectation('h', false);
      var peg$e52 = peg$classExpectation([' ', '\t'], false, false);
      var peg$e53 = peg$otherExpectation('space');
      var peg$e54 = peg$otherExpectation('new line');
      var peg$e55 = peg$classExpectation(['\n'], false, false);
      var peg$e56 = peg$otherExpectation('separator');
      var peg$e57 = peg$literalExpectation(',', false);
      var peg$e58 = peg$otherExpectation('0..9');
      var peg$e59 = peg$classExpectation([['0', '9']], false, false);
      var peg$e60 = peg$otherExpectation('1..9');
      var peg$e61 = peg$classExpectation([['1', '9']], false, false);
      var peg$e62 = peg$otherExpectation('a-z');
      var peg$e63 = peg$classExpectation([['a', 'z']], false, true);
      var peg$e64 = peg$otherExpectation('a-z or 0-9');
      var peg$e65 = peg$classExpectation(
        [
          ['a', 'z'],
          ['0', '9'],
        ],
        false,
        true,
      );
      var peg$e66 = peg$literalExpectation('true', false);
      var peg$e67 = peg$literalExpectation('1', false);
      var peg$e68 = peg$literalExpectation('on', false);
      var peg$e69 = peg$literalExpectation('false', false);
      var peg$e70 = peg$literalExpectation('0', false);
      var peg$e71 = peg$literalExpectation('off', false);
      var peg$e72 = peg$otherExpectation('integer');
      var peg$e73 = peg$otherExpectation('string');
      var peg$e74 = peg$literalExpectation("'", false);
      var peg$e75 = peg$anyExpectation();
      var peg$e76 = peg$otherExpectation('address');
      var peg$e77 = peg$literalExpectation('0x', false);
      var peg$e78 = peg$otherExpectation('pin');
      var peg$e79 = peg$literalExpectation('pin ', false);
      var peg$e80 = peg$literalExpectation('#', false);
      var peg$e81 = peg$literalExpectation('10', false);
      var peg$e82 = peg$literalExpectation('11', false);
      var peg$e83 = peg$literalExpectation('12', false);
      var peg$e84 = peg$literalExpectation('13', false);
      var peg$e85 = peg$literalExpectation('14', false);
      var peg$e86 = peg$literalExpectation('15', false);
      var peg$e87 = peg$classExpectation([['a', 'z']], false, false);
      var peg$e88 = peg$classExpectation([['a', 'z'], ['A', 'Z'], ['0', '9'], '_'], false, false);
      var peg$e89 = peg$otherExpectation('identifier');
      var peg$e90 = peg$literalExpectation('$', false);
      var peg$e91 = peg$literalExpectation('_', false);
      var peg$e92 = peg$otherExpectation('pin mode');
      var peg$e93 = peg$literalExpectation('input', false);
      var peg$e94 = peg$literalExpectation('output', false);
      var peg$e95 = peg$literalExpectation('open-drain', false);
      var peg$e96 = peg$literalExpectation('2', false);
      var peg$e97 = peg$literalExpectation('pull-up', false);
      var peg$e98 = peg$literalExpectation('3', false);
      var peg$e99 = peg$literalExpectation('byte', false);
      var peg$e100 = peg$literalExpectation('boolean', false);
      var peg$e101 = peg$literalExpectation('address', false);
      var peg$e102 = peg$literalExpectation('uint', false);
      var peg$e103 = peg$literalExpectation('int', false);
      var peg$e104 = peg$literalExpectation('string', false);
      // @ts-ignore

      var peg$f0 = function (pin, value) {
        // @ts-ignore
        return InstructionNode.create('ioWrite', { pin, value });
      }; // @ts-ignore

      var peg$f1 = function (target, pin) {
        // @ts-ignore
        return InstructionNode.create('ioRead', { pin, target });
      }; // @ts-ignore

      var peg$f2 = function (pin, mode) {
        // @ts-ignore
        return InstructionNode.create('ioMode', { pin, mode });
      }; // @ts-ignore

      var peg$f3 = function (pin, pinType) {
        // @ts-ignore
        return InstructionNode.create('ioType', { pin, pinType: Number(pinType) });
      }; // @ts-ignore

      var peg$f4 = function () {
        // @ts-ignore
        return InstructionNode.create('ioAllOut');
      }; // @ts-ignore

      var peg$f5 = function (destination, source) {
        // @ts-ignore
        return InstructionNode.create('memoryCopy', { source, destination });
      }; // @ts-ignore

      var peg$f6 = function (target, address) {
        // @ts-ignore
        return InstructionNode.create('memoryGet', { target, address });
      }; // @ts-ignore

      var peg$f7 = function (target, value) {
        // @ts-ignore
        return InstructionNode.create('memorySet', { target, value });
      }; // @ts-ignore

      var peg$f8 = function (c) {
        // @ts-ignore
        return c;
      }; // @ts-ignore

      var peg$f9 = function (c) {
        // @ts-ignore
        return c;
      }; // @ts-ignore

      var peg$f10 = function () {
        // @ts-ignore
        return [];
      }; // @ts-ignore

      var peg$f11 = function (target, value) {
        // @ts-ignore
        return InstructionNode.create('assign', { target, value });
      }; // @ts-ignore

      var peg$f12 = function (target, value) {
        // @ts-ignore
        return InstructionNode.create('not', { target, value });
      }; // @ts-ignore

      var peg$f13 = function (operator, target) {
        // @ts-ignore
        return InstructionNode.create('unaryOperation', { operator, target });
      }; // @ts-ignore

      var peg$f14 = function (target, a, operator, b) {
        // @ts-ignore
        return InstructionNode.create('binaryOperation', { operator, target, a, b });
      }; // @ts-ignore

      var peg$f15 = function (dataType, name, value) {
        // @ts-ignore
        return InstructionNode.create('declareIdentifier', { name, dataType, value });
      }; // @ts-ignore

      var peg$f16 = function (value) {
        // @ts-ignore
        return InstructionNode.create('identifierValue', { value, dataType: ValueType.Identifier });
      }; // @ts-ignore

      var peg$f17 = function (value) {
        // @ts-ignore
        return InstructionNode.create('byteValue', { value, dataType: ValueType.Pin });
      }; // @ts-ignore

      var peg$f18 = function (value) {
        // @ts-ignore
        return InstructionNode.create('byteValue', { value, dataType: ValueType.Byte });
      }; // @ts-ignore

      var peg$f19 = function (value) {
        // @ts-ignore
        return InstructionNode.create('byteValue', { value, dataType: ValueType.Byte });
      }; // @ts-ignore

      var peg$f20 = function (value) {
        // @ts-ignore
        return InstructionNode.create('numberValue', { value, dataType: ValueType.Address });
      }; // @ts-ignore

      var peg$f21 = function (value) {
        // @ts-ignore
        return InstructionNode.create('numberValue', { value, dataType: ValueType.Integer });
      }; // @ts-ignore

      var peg$f22 = function (value) {
        // @ts-ignore
        return InstructionNode.create('numberValue', { value, dataType: ValueType.SignedInteger });
      }; // @ts-ignore

      var peg$f23 = function (value) {
        // @ts-ignore
        return InstructionNode.create('stringValue', { value, dataType: ValueType.String });
      }; // @ts-ignore

      var peg$f24 = function () {
        // @ts-ignore
        return InstructionNode.create('byteValue', { value: 0, dataType: ValueType.Null });
      }; // @ts-ignore

      var peg$f25 = function () {
        // @ts-ignore
        return InstructionNode.create('halt');
      }; // @ts-ignore

      var peg$f26 = function () {
        // @ts-ignore
        return InstructionNode.create('restart');
      }; // @ts-ignore

      var peg$f27 = function () {
        // @ts-ignore
        return InstructionNode.create('noop');
      }; // @ts-ignore

      var peg$f28 = function () {
        // @ts-ignore
        return InstructionNode.create('systemInfo');
      }; // @ts-ignore

      var peg$f29 = function () {
        // @ts-ignore
        return InstructionNode.create('dump');
      }; // @ts-ignore

      var peg$f30 = function (value) {
        // @ts-ignore
        return InstructionNode.create('debug', { value });
      }; // @ts-ignore

      var peg$f31 = function (value) {
        // @ts-ignore
        return InstructionNode.create('print', { value });
      }; // @ts-ignore

      var peg$f32 = function (value) {
        // @ts-ignore
        return InstructionNode.create('delay', { value });
      }; // @ts-ignore

      var peg$f33 = function (value) {
        // @ts-ignore
        return InstructionNode.create('sleep', { value });
      }; // @ts-ignore

      var peg$f34 = function () {
        // @ts-ignore
        return InstructionNode.create('yield');
      }; // @ts-ignore

      var peg$f35 = function (address) {
        // @ts-ignore
        return InstructionNode.create('jumpTo', { address });
      }; // @ts-ignore

      var peg$f36 = function (label) {
        // @ts-ignore
        return InstructionNode.create('jumpTo', { label });
      }; // @ts-ignore

      var peg$f37 = function (condition, address) {
        // @ts-ignore
        return InstructionNode.create('jumpIf', { condition, address });
      }; // @ts-ignore

      var peg$f38 = function (condition, label) {
        // @ts-ignore
        return InstructionNode.create('jumpIf', { condition, label });
      }; // @ts-ignore

      var peg$f39 = function () {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f40 = function (a, b) {
        // @ts-ignore
        return parseInt(a + b, 16);
      }; // @ts-ignore

      var peg$f41 = function () {
        // @ts-ignore
        return 1;
      }; // @ts-ignore

      var peg$f42 = function () {
        // @ts-ignore
        return 0;
      }; // @ts-ignore

      var peg$f43 = function () {
        // @ts-ignore
        return 0;
      }; // @ts-ignore

      var peg$f44 = function () {
        // @ts-ignore
        return parseInt(text());
      }; // @ts-ignore

      var peg$f45 = function (signal, int) {
        // @ts-ignore
        return int * (signal === '-' ? -1 : 1);
      }; // @ts-ignore

      var peg$f46 = function (string) {
        // @ts-ignore
        return string.map((s) => s[1]);
      }; // @ts-ignore

      var peg$f47 = function (a, b, c, d) {
        // @ts-ignore
        return parseInt(a + b + c + d, 16);
      }; // @ts-ignore

      var peg$f48 = function (pin) {
        // @ts-ignore
        return Number(pin);
      }; // @ts-ignore

      var peg$f49 = function () {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f50 = function (label) {
        // @ts-ignore
        return InstructionNode.create('defineLabel', { label });
      }; // @ts-ignore

      var peg$f51 = function (label) {
        // @ts-ignore
        return InstructionNode.create('label', { label });
      }; // @ts-ignore

      var peg$f52 = function (head, tail) {
        // @ts-ignore
        return text();
      }; // @ts-ignore

      var peg$f53 = function (name) {
        // @ts-ignore
        return InstructionNode.create('useIdentifier', { name });
      }; // @ts-ignore

      var peg$f54 = function () {
        // @ts-ignore
        return 0;
      }; // @ts-ignore

      var peg$f55 = function () {
        // @ts-ignore
        return 1;
      }; // @ts-ignore

      var peg$f56 = function () {
        // @ts-ignore
        return 2;
      }; // @ts-ignore

      var peg$f57 = function () {
        // @ts-ignore
        return 3;
      }; // @ts-ignore

      var peg$f58 = function () {
        // @ts-ignore
        return ValueType.Byte;
      }; // @ts-ignore

      var peg$f59 = function () {
        // @ts-ignore
        return ValueType.Byte;
      }; // @ts-ignore

      var peg$f60 = function () {
        // @ts-ignore
        return ValueType.Address;
      }; // @ts-ignore

      var peg$f61 = function () {
        // @ts-ignore
        return ValueType.Integer;
      }; // @ts-ignore

      var peg$f62 = function () {
        // @ts-ignore
        return ValueType.SignedInteger;
      }; // @ts-ignore

      var peg$f63 = function () {
        // @ts-ignore
        return ValueType.String;
      };
      // @ts-ignore
      var peg$currPos = 0;
      // @ts-ignore
      var peg$savedPos = 0;
      // @ts-ignore
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      // @ts-ignore
      var peg$maxFailPos = 0;
      // @ts-ignore
      var peg$maxFailExpected = [];
      // @ts-ignore
      var peg$silentFails = 0;

      // @ts-ignore
      var peg$resultsCache = {};

      // @ts-ignore
      var peg$result;

      // @ts-ignore
      if ('startRule' in options) {
        // @ts-ignore
        if (!(options.startRule in peg$startRuleFunctions)) {
          // @ts-ignore
          throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
        }

        // @ts-ignore
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }

      // @ts-ignore
      function text() {
        // @ts-ignore
        return input.substring(peg$savedPos, peg$currPos);
      }

      // @ts-ignore
      function offset() {
        // @ts-ignore
        return peg$savedPos;
      }

      // @ts-ignore
      function range() {
        // @ts-ignore
        return {
          // @ts-ignore
          source: peg$source,
          // @ts-ignore
          start: peg$savedPos,
          // @ts-ignore
          end: peg$currPos,
        };
      }

      // @ts-ignore
      function location() {
        // @ts-ignore
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }

      // @ts-ignore
      function expected(description, location) {
        // @ts-ignore
        location =
          location !== undefined
            ? // @ts-ignore
              location
            : // @ts-ignore
              peg$computeLocation(peg$savedPos, peg$currPos);

        // @ts-ignore
        throw peg$buildStructuredError(
          // @ts-ignore
          [peg$otherExpectation(description)],
          // @ts-ignore
          input.substring(peg$savedPos, peg$currPos),
          // @ts-ignore
          location,
        );
      }

      // @ts-ignore
      function error(message, location) {
        // @ts-ignore
        location =
          location !== undefined
            ? // @ts-ignore
              location
            : // @ts-ignore
              peg$computeLocation(peg$savedPos, peg$currPos);

        // @ts-ignore
        throw peg$buildSimpleError(message, location);
      }

      // @ts-ignore
      function peg$literalExpectation(text, ignoreCase) {
        // @ts-ignore
        return { type: 'literal', text: text, ignoreCase: ignoreCase };
      }

      // @ts-ignore
      function peg$classExpectation(parts, inverted, ignoreCase) {
        // @ts-ignore
        return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
      }

      // @ts-ignore
      function peg$anyExpectation() {
        // @ts-ignore
        return { type: 'any' };
      }

      // @ts-ignore
      function peg$endExpectation() {
        // @ts-ignore
        return { type: 'end' };
      }

      // @ts-ignore
      function peg$otherExpectation(description) {
        // @ts-ignore
        return { type: 'other', description: description };
      }

      // @ts-ignore
      function peg$computePosDetails(pos) {
        // @ts-ignore
        var details = peg$posDetailsCache[pos];
        // @ts-ignore
        var p;

        // @ts-ignore
        if (details) {
          // @ts-ignore
          return details;
          // @ts-ignore
        } else {
          // @ts-ignore
          p = pos - 1;
          // @ts-ignore
          while (!peg$posDetailsCache[p]) {
            // @ts-ignore
            p--;
          }

          // @ts-ignore
          details = peg$posDetailsCache[p];
          // @ts-ignore
          details = {
            // @ts-ignore
            line: details.line,
            // @ts-ignore
            column: details.column,
          };

          // @ts-ignore
          while (p < pos) {
            // @ts-ignore
            if (input.charCodeAt(p) === 10) {
              // @ts-ignore
              details.line++;
              // @ts-ignore
              details.column = 1;
              // @ts-ignore
            } else {
              // @ts-ignore
              details.column++;
            }

            // @ts-ignore
            p++;
          }

          // @ts-ignore
          peg$posDetailsCache[pos] = details;

          // @ts-ignore
          return details;
        }
      }

      // @ts-ignore
      function peg$computeLocation(startPos, endPos, offset) {
        // @ts-ignore
        var startPosDetails = peg$computePosDetails(startPos);
        // @ts-ignore
        var endPosDetails = peg$computePosDetails(endPos);

        // @ts-ignore
        var res = {
          // @ts-ignore
          source: peg$source,
          // @ts-ignore
          start: {
            // @ts-ignore
            offset: startPos,
            // @ts-ignore
            line: startPosDetails.line,
            // @ts-ignore
            column: startPosDetails.column,
          },
          // @ts-ignore
          end: {
            // @ts-ignore
            offset: endPos,
            // @ts-ignore
            line: endPosDetails.line,
            // @ts-ignore
            column: endPosDetails.column,
          },
        };
        // @ts-ignore
        if (offset && peg$source && typeof peg$source.offset === 'function') {
          // @ts-ignore
          res.start = peg$source.offset(res.start);
          // @ts-ignore
          res.end = peg$source.offset(res.end);
        }
        // @ts-ignore
        return res;
      }

      // @ts-ignore
      function peg$fail(expected) {
        // @ts-ignore
        if (peg$currPos < peg$maxFailPos) {
          return;
        }

        // @ts-ignore
        if (peg$currPos > peg$maxFailPos) {
          // @ts-ignore
          peg$maxFailPos = peg$currPos;
          // @ts-ignore
          peg$maxFailExpected = [];
        }

        // @ts-ignore
        peg$maxFailExpected.push(expected);
      }

      // @ts-ignore
      function peg$buildSimpleError(message, location) {
        // @ts-ignore
        return new peg$SyntaxError(message, null, null, location);
      }

      // @ts-ignore
      function peg$buildStructuredError(expected, found, location) {
        // @ts-ignore
        return new peg$SyntaxError(
          // @ts-ignore
          peg$SyntaxError.buildMessage(expected, found),
          // @ts-ignore
          expected,
          // @ts-ignore
          found,
          // @ts-ignore
          location,
        );
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoInstruction() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 0;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseIoWrite();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseIoRead();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseIoMode();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseIoType();
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseIoAllOut();
              }
            }
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoWrite() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 1;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 8) === peg$c0) {
          // @ts-ignore
          s1 = peg$c0;
          // @ts-ignore
          peg$currPos += 8;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e0);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parsePin();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSeparator();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parseIoValue();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f0(s3, s5);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoRead() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 2;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c1) {
          // @ts-ignore
          s1 = peg$c1;
          // @ts-ignore
          peg$currPos += 7;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e1);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseIdentifierValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSeparator();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parsePin();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f1(s3, s5);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoMode() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 3;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c2) {
          // @ts-ignore
          s1 = peg$c2;
          // @ts-ignore
          peg$currPos += 7;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e2);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parsePin();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSeparator();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parsePinMode();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f2(s3, s5);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoType() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 4;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c3) {
          // @ts-ignore
          s1 = peg$c3;
          // @ts-ignore
          peg$currPos += 7;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e3);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parsePin();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSeparator();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parseDigit();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f3(s3, s5);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoAllOut() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 5;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 10) === peg$c4) {
          // @ts-ignore
          s1 = peg$c4;
          // @ts-ignore
          peg$currPos += 10;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e4);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f4();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIoValue() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 6;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseByteValue();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseIdentifierValue();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseBooleanValue();
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseMemoryInstruction() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 7;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseMemoryGet();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseMemorySet();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseMemoryCopy();
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseMemoryCopy() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 8;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseAddressValue();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseASSIGN();
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            s3 = peg$parseAddressValue();
            // @ts-ignore
            if (s3 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f5(s1, s3);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseMemoryGet() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 9;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c5) {
          // @ts-ignore
          s1 = peg$c5;
          // @ts-ignore
          peg$currPos += 3;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e5);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseIdentifierValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSeparator();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parseAddressValue();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f6(s3, s5);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseMemorySet() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 10;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c6) {
          // @ts-ignore
          s1 = peg$c6;
          // @ts-ignore
          peg$currPos += 3;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e6);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseAddressValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSeparator();
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parseValue();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f7(s3, s5);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseProgram() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        var key = peg$currPos * 79 + 11;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = [];
        // @ts-ignore
        s2 = peg$parseLine();
        // @ts-ignore
        while (s2 !== peg$FAILED) {
          // @ts-ignore
          s1.push(s2);
          // @ts-ignore
          s2 = peg$parseLine();
        }
        // @ts-ignore
        peg$savedPos = s0;
        // @ts-ignore
        s1 = peg$f8(s1);
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseLine() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 12;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseSpaces();
        // @ts-ignore
        s2 = peg$parseStatement();
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          s3 = peg$parseStatementSeparator();
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s0 = peg$f9(s2);
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e7);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseStatementSeparator() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 13;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseNewLine();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = null;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseStatement() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 14;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$parseDefineLabel();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseSystemInstruction();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseMemoryInstruction();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseOperator();
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseIoInstruction();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                  // @ts-ignore
                  s0 = peg$parseComment();
                }
              }
            }
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e7);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseComment() {
        // @ts-ignore
        var s0, s1, s2, s3, s4;

        // @ts-ignore
        var key = peg$currPos * 79 + 15;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c7) {
          // @ts-ignore
          s2 = peg$c7;
          // @ts-ignore
          peg$currPos += 2;
          // @ts-ignore
        } else {
          // @ts-ignore
          s2 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e9);
          }
        }
        // @ts-ignore
        if (s2 !== peg$FAILED) {
          // @ts-ignore
          s3 = [];
          // @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
            // @ts-ignore
            s4 = input.charAt(peg$currPos);
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s4 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e10);
            }
          }
          // @ts-ignore
          if (s4 !== peg$FAILED) {
            // @ts-ignore
            while (s4 !== peg$FAILED) {
              // @ts-ignore
              s3.push(s4);
              // @ts-ignore
              if (peg$r0.test(input.charAt(peg$currPos))) {
                // @ts-ignore
                s4 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s4 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e10);
                }
              }
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s2 = [s2, s3];
            // @ts-ignore
            s1 = s2;
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s1;
            // @ts-ignore
            s1 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s1;
          // @ts-ignore
          s1 = peg$FAILED;
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f10();
        }
        // @ts-ignore
        s0 = s1;
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e8);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseOperator() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 16;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseBinaryOperation();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseUnaryOperation();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseDeclareIdentifier();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseAssign();
            }
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseASSIGN() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 17;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
          // @ts-ignore
          s0 = peg$c8;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e11);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseAssign() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 18;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseIdentifierValue();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseASSIGN();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSpaces();
            // @ts-ignore
            s5 = peg$parseValue();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f11(s1, s5);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseUnaryOperation() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 19;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parsenot();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parsestep();
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsenot() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7;

        // @ts-ignore
        var key = peg$currPos * 79 + 20;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseIdentifierValue();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseASSIGN();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSpaces();
            // @ts-ignore
            if (input.substr(peg$currPos, 3) === peg$c9) {
              // @ts-ignore
              s5 = peg$c9;
              // @ts-ignore
              peg$currPos += 3;
              // @ts-ignore
            } else {
              // @ts-ignore
              s5 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e12);
              }
            }
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parseSpaces();
              // @ts-ignore
              s7 = peg$parseValue();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f12(s1, s7);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsestep() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 21;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 3) === peg$c10) {
          // @ts-ignore
          s1 = peg$c10;
          // @ts-ignore
          peg$currPos += 3;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e13);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.substr(peg$currPos, 3) === peg$c11) {
            // @ts-ignore
            s1 = peg$c11;
            // @ts-ignore
            peg$currPos += 3;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e14);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseIdentifierValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f13(s1, s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseBinaryOperation() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        // @ts-ignore
        var key = peg$currPos * 79 + 22;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseIdentifierValue();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseASSIGN();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSpaces();
            // @ts-ignore
            s5 = peg$parseValue();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parseSpaces();
              // @ts-ignore
              s7 = peg$parseBinaryOperator();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parseSpaces();
                // @ts-ignore
                s9 = peg$parseValue();
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  peg$savedPos = s0;
                  // @ts-ignore
                  s0 = peg$f14(s1, s5, s7, s9);
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseBinaryOperator() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 23;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c12) {
          // @ts-ignore
          s0 = peg$c12;
          // @ts-ignore
          peg$currPos += 2;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e15);
          }
        }
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 62) {
            // @ts-ignore
            s0 = peg$c13;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s0 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e16);
            }
          }
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c14) {
              // @ts-ignore
              s0 = peg$c14;
              // @ts-ignore
              peg$currPos += 2;
              // @ts-ignore
            } else {
              // @ts-ignore
              s0 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e17);
              }
            }
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              if (input.charCodeAt(peg$currPos) === 60) {
                // @ts-ignore
                s0 = peg$c15;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s0 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e18);
                }
              }
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c16) {
                  // @ts-ignore
                  s0 = peg$c16;
                  // @ts-ignore
                  peg$currPos += 2;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  s0 = peg$FAILED;
                  // @ts-ignore
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                  }
                }
                // @ts-ignore
                if (s0 === peg$FAILED) {
                  // @ts-ignore
                  if (input.substr(peg$currPos, 2) === peg$c17) {
                    // @ts-ignore
                    s0 = peg$c17;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    s0 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e20);
                    }
                  }
                  // @ts-ignore
                  if (s0 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 3) === peg$c18) {
                      // @ts-ignore
                      s0 = peg$c18;
                      // @ts-ignore
                      peg$currPos += 3;
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      s0 = peg$FAILED;
                      // @ts-ignore
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e21);
                      }
                    }
                    // @ts-ignore
                    if (s0 === peg$FAILED) {
                      // @ts-ignore
                      if (input.substr(peg$currPos, 3) === peg$c19) {
                        // @ts-ignore
                        s0 = peg$c19;
                        // @ts-ignore
                        peg$currPos += 3;
                        // @ts-ignore
                      } else {
                        // @ts-ignore
                        s0 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e22);
                        }
                      }
                      // @ts-ignore
                      if (s0 === peg$FAILED) {
                        // @ts-ignore
                        if (input.substr(peg$currPos, 2) === peg$c20) {
                          // @ts-ignore
                          s0 = peg$c20;
                          // @ts-ignore
                          peg$currPos += 2;
                          // @ts-ignore
                        } else {
                          // @ts-ignore
                          s0 = peg$FAILED;
                          // @ts-ignore
                          if (peg$silentFails === 0) {
                            peg$fail(peg$e23);
                          }
                        }
                        // @ts-ignore
                        if (s0 === peg$FAILED) {
                          // @ts-ignore
                          if (input.charCodeAt(peg$currPos) === 43) {
                            // @ts-ignore
                            s0 = peg$c21;
                            // @ts-ignore
                            peg$currPos++;
                            // @ts-ignore
                          } else {
                            // @ts-ignore
                            s0 = peg$FAILED;
                            // @ts-ignore
                            if (peg$silentFails === 0) {
                              peg$fail(peg$e24);
                            }
                          }
                          // @ts-ignore
                          if (s0 === peg$FAILED) {
                            // @ts-ignore
                            if (input.charCodeAt(peg$currPos) === 45) {
                              // @ts-ignore
                              s0 = peg$c22;
                              // @ts-ignore
                              peg$currPos++;
                              // @ts-ignore
                            } else {
                              // @ts-ignore
                              s0 = peg$FAILED;
                              // @ts-ignore
                              if (peg$silentFails === 0) {
                                peg$fail(peg$e25);
                              }
                            }
                            // @ts-ignore
                            if (s0 === peg$FAILED) {
                              // @ts-ignore
                              if (input.charCodeAt(peg$currPos) === 42) {
                                // @ts-ignore
                                s0 = peg$c23;
                                // @ts-ignore
                                peg$currPos++;
                                // @ts-ignore
                              } else {
                                // @ts-ignore
                                s0 = peg$FAILED;
                                // @ts-ignore
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$e26);
                                }
                              }
                              // @ts-ignore
                              if (s0 === peg$FAILED) {
                                // @ts-ignore
                                if (input.charCodeAt(peg$currPos) === 47) {
                                  // @ts-ignore
                                  s0 = peg$c24;
                                  // @ts-ignore
                                  peg$currPos++;
                                  // @ts-ignore
                                } else {
                                  // @ts-ignore
                                  s0 = peg$FAILED;
                                  // @ts-ignore
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$e27);
                                  }
                                }
                                // @ts-ignore
                                if (s0 === peg$FAILED) {
                                  // @ts-ignore
                                  if (input.charCodeAt(peg$currPos) === 37) {
                                    // @ts-ignore
                                    s0 = peg$c25;
                                    // @ts-ignore
                                    peg$currPos++;
                                    // @ts-ignore
                                  } else {
                                    // @ts-ignore
                                    s0 = peg$FAILED;
                                    // @ts-ignore
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$e28);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseDeclareIdentifier() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7;

        // @ts-ignore
        var key = peg$currPos * 79 + 24;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseValueTypeMap();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseIdentifier();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSpaces();
            // @ts-ignore
            s5 = peg$parseASSIGN();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parseSpaces();
              // @ts-ignore
              s7 = peg$parseValue();
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s0 = peg$f15(s1, s3, s7);
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIdentifierValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 25;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseUseIdentifier();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f16(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePinValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 26;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parsePin();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f17(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseBooleanValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 27;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseBoolean();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f18(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseByteValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 28;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseByte();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f19(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseAddressValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 29;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseAddress();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f20(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIntegerValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 30;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseInteger();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f21(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSignedIntegerValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 31;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseSignedInteger();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f22(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseStringValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 32;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseString();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f23(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseNullValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 33;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c26) {
          // @ts-ignore
          s1 = peg$c26;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e29);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f24();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseNumberValue() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 34;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseIntegerValue();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseSignedIntegerValue();
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseValue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 35;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$parseIdentifierValue();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseByteValue();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseAddressValue();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseNumberValue();
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseStringValue();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                  // @ts-ignore
                  s0 = peg$parseBooleanValue();
                  // @ts-ignore
                  if (s0 === peg$FAILED) {
                    // @ts-ignore
                    s0 = peg$parseNullValue();
                  }
                }
              }
            }
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e30);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIntrinsicValue() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 36;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseByteValue();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseNumberValue();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseStringValue();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseBooleanValue();
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseNullValue();
              }
            }
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSystemInstruction() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 37;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$parseHalt();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseRestart();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parseSystemInfo();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parseDebug();
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$parseDump();
                // @ts-ignore
                if (s0 === peg$FAILED) {
                  // @ts-ignore
                  s0 = peg$parseNoop();
                  // @ts-ignore
                  if (s0 === peg$FAILED) {
                    // @ts-ignore
                    s0 = peg$parsePrint();
                    // @ts-ignore
                    if (s0 === peg$FAILED) {
                      // @ts-ignore
                      s0 = peg$parseJumpTo();
                      // @ts-ignore
                      if (s0 === peg$FAILED) {
                        // @ts-ignore
                        s0 = peg$parseJumpIf();
                        // @ts-ignore
                        if (s0 === peg$FAILED) {
                          // @ts-ignore
                          s0 = peg$parseDelay();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e31);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseHalt() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 38;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c27) {
          // @ts-ignore
          s1 = peg$c27;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e32);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f25();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseRestart() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 39;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c28) {
          // @ts-ignore
          s1 = peg$c28;
          // @ts-ignore
          peg$currPos += 7;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e33);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f26();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseNoop() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 40;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c29) {
          // @ts-ignore
          s1 = peg$c29;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e34);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f27();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSystemInfo() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 41;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c30) {
          // @ts-ignore
          s1 = peg$c30;
          // @ts-ignore
          peg$currPos += 7;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e35);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f28();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseDump() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 42;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c31) {
          // @ts-ignore
          s1 = peg$c31;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e36);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f29();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseDebug() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 43;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c32) {
          // @ts-ignore
          s1 = peg$c32;
          // @ts-ignore
          peg$currPos += 5;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e37);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseBooleanValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f30(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePrint() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 44;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c33) {
          // @ts-ignore
          s1 = peg$c33;
          // @ts-ignore
          peg$currPos += 5;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e38);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f31(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseDelay() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 45;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c34) {
          // @ts-ignore
          s1 = peg$c34;
          // @ts-ignore
          peg$currPos += 5;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e39);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseIntegerValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f32(s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          if (input.substr(peg$currPos, 5) === peg$c35) {
            // @ts-ignore
            s1 = peg$c35;
            // @ts-ignore
            peg$currPos += 5;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e40);
            }
          }
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            s2 = peg$parseSpaces();
            // @ts-ignore
            s3 = peg$parseIntegerValue();
            // @ts-ignore
            if (s3 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f33(s3);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 5) === peg$c36) {
              // @ts-ignore
              s1 = peg$c36;
              // @ts-ignore
              peg$currPos += 5;
              // @ts-ignore
            } else {
              // @ts-ignore
              s1 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e41);
              }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s1 = peg$f34();
            }
            // @ts-ignore
            s0 = s1;
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseJumpTo() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6;

        // @ts-ignore
        var key = peg$currPos * 79 + 46;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c37) {
          // @ts-ignore
          s1 = peg$c37;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e42);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c38) {
            // @ts-ignore
            s3 = peg$c38;
            // @ts-ignore
            peg$currPos += 2;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e43);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSpaces();
            // @ts-ignore
            s5 = peg$parseAddressValue();
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s0 = peg$f35(s5);
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          if (input.substr(peg$currPos, 4) === peg$c37) {
            // @ts-ignore
            s1 = peg$c37;
            // @ts-ignore
            peg$currPos += 4;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e42);
            }
          }
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            s2 = peg$parseSpaces();
            // @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c38) {
              // @ts-ignore
              s3 = peg$c38;
              // @ts-ignore
              peg$currPos += 2;
              // @ts-ignore
            } else {
              // @ts-ignore
              s3 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e43);
              }
            }
            // @ts-ignore
            if (s3 !== peg$FAILED) {
              // @ts-ignore
              s4 = peg$parseSpaces();
              // @ts-ignore
              if (input.charCodeAt(peg$currPos) === 64) {
                // @ts-ignore
                s5 = peg$c39;
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s5 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e44);
                }
              }
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                s6 = peg$parseLabel();
                // @ts-ignore
                if (s6 !== peg$FAILED) {
                  // @ts-ignore
                  peg$savedPos = s0;
                  // @ts-ignore
                  s0 = peg$f36(s6);
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseJumpIf() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

        // @ts-ignore
        var key = peg$currPos * 79 + 47;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c40) {
          // @ts-ignore
          s1 = peg$c40;
          // @ts-ignore
          peg$currPos += 2;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e45);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s3 = peg$parseValue();
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            s4 = peg$parseSpaces();
            // @ts-ignore
            if (input.substr(peg$currPos, 4) === peg$c41) {
              // @ts-ignore
              s5 = peg$c41;
              // @ts-ignore
              peg$currPos += 4;
              // @ts-ignore
            } else {
              // @ts-ignore
              s5 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e46);
              }
            }
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s6 = peg$parseSpaces();
              // @ts-ignore
              if (input.substr(peg$currPos, 4) === peg$c37) {
                // @ts-ignore
                s7 = peg$c37;
                // @ts-ignore
                peg$currPos += 4;
                // @ts-ignore
              } else {
                // @ts-ignore
                s7 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e42);
                }
              }
              // @ts-ignore
              if (s7 !== peg$FAILED) {
                // @ts-ignore
                s8 = peg$parseSpaces();
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c38) {
                  // @ts-ignore
                  s9 = peg$c38;
                  // @ts-ignore
                  peg$currPos += 2;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  s9 = peg$FAILED;
                  // @ts-ignore
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e43);
                  }
                }
                // @ts-ignore
                if (s9 !== peg$FAILED) {
                  // @ts-ignore
                  s10 = peg$parseSpaces();
                  // @ts-ignore
                  s11 = peg$parseAddressValue();
                  // @ts-ignore
                  if (s11 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s0 = peg$f37(s3, s11);
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c40) {
            // @ts-ignore
            s1 = peg$c40;
            // @ts-ignore
            peg$currPos += 2;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e45);
            }
          }
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            s2 = peg$parseSpaces();
            // @ts-ignore
            s3 = peg$parseValue();
            // @ts-ignore
            if (s3 !== peg$FAILED) {
              // @ts-ignore
              s4 = peg$parseSpaces();
              // @ts-ignore
              if (input.substr(peg$currPos, 4) === peg$c41) {
                // @ts-ignore
                s5 = peg$c41;
                // @ts-ignore
                peg$currPos += 4;
                // @ts-ignore
              } else {
                // @ts-ignore
                s5 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e46);
                }
              }
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                s6 = peg$parseSpaces();
                // @ts-ignore
                if (input.substr(peg$currPos, 4) === peg$c37) {
                  // @ts-ignore
                  s7 = peg$c37;
                  // @ts-ignore
                  peg$currPos += 4;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  s7 = peg$FAILED;
                  // @ts-ignore
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e42);
                  }
                }
                // @ts-ignore
                if (s7 !== peg$FAILED) {
                  // @ts-ignore
                  s8 = peg$parseSpaces();
                  // @ts-ignore
                  if (input.substr(peg$currPos, 2) === peg$c38) {
                    // @ts-ignore
                    s9 = peg$c38;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    s9 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e43);
                    }
                  }
                  // @ts-ignore
                  if (s9 !== peg$FAILED) {
                    // @ts-ignore
                    s10 = peg$parseSpaces();
                    // @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 64) {
                      // @ts-ignore
                      s11 = peg$c39;
                      // @ts-ignore
                      peg$currPos++;
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      s11 = peg$FAILED;
                      // @ts-ignore
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e44);
                      }
                    }
                    // @ts-ignore
                    if (s11 !== peg$FAILED) {
                      // @ts-ignore
                      s12 = peg$parseLabel();
                      // @ts-ignore
                      if (s12 !== peg$FAILED) {
                        // @ts-ignore
                        peg$savedPos = s0;
                        // @ts-ignore
                        s0 = peg$f38(s3, s12);
                        // @ts-ignore
                      } else {
                        // @ts-ignore
                        peg$currPos = s0;
                        // @ts-ignore
                        s0 = peg$FAILED;
                      }
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      peg$currPos = s0;
                      // @ts-ignore
                      s0 = peg$FAILED;
                    }
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    peg$currPos = s0;
                    // @ts-ignore
                    s0 = peg$FAILED;
                  }
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseHexDigit() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 48;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s0 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e48);
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e47);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseHexByte() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        var key = peg$currPos * 79 + 49;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseHexDigit();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseHexDigit();
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f39();
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e49);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseByte() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 50;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseHexDigit();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseHexDigit();
          // @ts-ignore
          if (s2 === peg$FAILED) {
            // @ts-ignore
            s2 = null;
          }
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 104) {
            // @ts-ignore
            s3 = peg$c42;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e51);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f40(s1, s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e50);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSpace() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 51;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        if (peg$r2.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s0 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e52);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSpaces() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 52;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = [];
        // @ts-ignore
        s1 = peg$parseSpace();
        // @ts-ignore
        while (s1 !== peg$FAILED) {
          // @ts-ignore
          s0.push(s1);
          // @ts-ignore
          s1 = peg$parseSpace();
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        s1 = peg$FAILED;
        // @ts-ignore
        if (peg$silentFails === 0) {
          peg$fail(peg$e53);
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseNewLine() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 53;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = [];
        // @ts-ignore
        if (peg$r3.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s1 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e55);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          while (s1 !== peg$FAILED) {
            // @ts-ignore
            s0.push(s1);
            // @ts-ignore
            if (peg$r3.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s1 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s1 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e55);
              }
            }
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e54);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSeparator() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        var key = peg$currPos * 79 + 54;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
          // @ts-ignore
          s1 = peg$c43;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e57);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseSpaces();
          // @ts-ignore
          s1 = [s1, s2];
          // @ts-ignore
          s0 = s1;
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e56);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseDigit() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 55;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        if (peg$r4.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s0 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e59);
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e58);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseNonZeroDigit() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 56;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        if (peg$r5.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s0 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e61);
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e60);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseAlpha() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 57;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        if (peg$r6.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s0 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e63);
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e62);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseAlphanumeric() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 58;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        if (peg$r7.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s0 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s0 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e65);
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e64);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseTrue() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 59;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c44) {
          // @ts-ignore
          s1 = peg$c44;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e66);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 49) {
            // @ts-ignore
            s1 = peg$c45;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e67);
            }
          }
          // @ts-ignore
          if (s1 === peg$FAILED) {
            // @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c46) {
              // @ts-ignore
              s1 = peg$c46;
              // @ts-ignore
              peg$currPos += 2;
              // @ts-ignore
            } else {
              // @ts-ignore
              s1 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e68);
              }
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f41();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseFalse() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 60;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c47) {
          // @ts-ignore
          s1 = peg$c47;
          // @ts-ignore
          peg$currPos += 5;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e69);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 48) {
            // @ts-ignore
            s1 = peg$c48;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e70);
            }
          }
          // @ts-ignore
          if (s1 === peg$FAILED) {
            // @ts-ignore
            if (input.substr(peg$currPos, 3) === peg$c49) {
              // @ts-ignore
              s1 = peg$c49;
              // @ts-ignore
              peg$currPos += 3;
              // @ts-ignore
            } else {
              // @ts-ignore
              s1 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e71);
              }
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f42();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseBoolean() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 61;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseTrue();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parseFalse();
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseInteger() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 62;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 48) {
          // @ts-ignore
          s1 = peg$c48;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e70);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f43();
        }
        // @ts-ignore
        s0 = s1;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          s1 = peg$parseNonZeroDigit();
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            s2 = [];
            // @ts-ignore
            s3 = peg$currPos;
            // @ts-ignore
            s4 = peg$currPos;
            // @ts-ignore
            peg$silentFails++;
            // @ts-ignore
            s5 = peg$parseSpace();
            // @ts-ignore
            peg$silentFails--;
            // @ts-ignore
            if (s5 === peg$FAILED) {
              // @ts-ignore
              s4 = undefined;
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s4;
              // @ts-ignore
              s4 = peg$FAILED;
            }
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              s5 = peg$parseDigit();
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                s4 = [s4, s5];
                // @ts-ignore
                s3 = s4;
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s3;
                // @ts-ignore
                s3 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s3;
              // @ts-ignore
              s3 = peg$FAILED;
            }
            // @ts-ignore
            while (s3 !== peg$FAILED) {
              // @ts-ignore
              s2.push(s3);
              // @ts-ignore
              s3 = peg$currPos;
              // @ts-ignore
              s4 = peg$currPos;
              // @ts-ignore
              peg$silentFails++;
              // @ts-ignore
              s5 = peg$parseSpace();
              // @ts-ignore
              peg$silentFails--;
              // @ts-ignore
              if (s5 === peg$FAILED) {
                // @ts-ignore
                s4 = undefined;
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s4;
                // @ts-ignore
                s4 = peg$FAILED;
              }
              // @ts-ignore
              if (s4 !== peg$FAILED) {
                // @ts-ignore
                s5 = peg$parseDigit();
                // @ts-ignore
                if (s5 !== peg$FAILED) {
                  // @ts-ignore
                  s4 = [s4, s5];
                  // @ts-ignore
                  s3 = s4;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s3;
                  // @ts-ignore
                  s3 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s3;
                // @ts-ignore
                s3 = peg$FAILED;
              }
            }
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f44();
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e72);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseSignedInteger() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        var key = peg$currPos * 79 + 63;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 45) {
          // @ts-ignore
          s1 = peg$c22;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e25);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 43) {
            // @ts-ignore
            s1 = peg$c21;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e24);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseInteger();
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f45(s1, s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseString() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 64;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 39) {
          // @ts-ignore
          s1 = peg$c50;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e74);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = [];
          // @ts-ignore
          s3 = peg$currPos;
          // @ts-ignore
          s4 = peg$currPos;
          // @ts-ignore
          peg$silentFails++;
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 39) {
            // @ts-ignore
            s5 = peg$c50;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s5 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e74);
            }
          }
          // @ts-ignore
          peg$silentFails--;
          // @ts-ignore
          if (s5 === peg$FAILED) {
            // @ts-ignore
            s4 = undefined;
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s4;
            // @ts-ignore
            s4 = peg$FAILED;
          }
          // @ts-ignore
          if (s4 !== peg$FAILED) {
            // @ts-ignore
            if (input.length > peg$currPos) {
              // @ts-ignore
              s5 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s5 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e75);
              }
            }
            // @ts-ignore
            if (s5 !== peg$FAILED) {
              // @ts-ignore
              s4 = [s4, s5];
              // @ts-ignore
              s3 = s4;
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s3;
              // @ts-ignore
              s3 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s3;
            // @ts-ignore
            s3 = peg$FAILED;
          }
          // @ts-ignore
          while (s3 !== peg$FAILED) {
            // @ts-ignore
            s2.push(s3);
            // @ts-ignore
            s3 = peg$currPos;
            // @ts-ignore
            s4 = peg$currPos;
            // @ts-ignore
            peg$silentFails++;
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 39) {
              // @ts-ignore
              s5 = peg$c50;
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s5 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e74);
              }
            }
            // @ts-ignore
            peg$silentFails--;
            // @ts-ignore
            if (s5 === peg$FAILED) {
              // @ts-ignore
              s4 = undefined;
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s4;
              // @ts-ignore
              s4 = peg$FAILED;
            }
            // @ts-ignore
            if (s4 !== peg$FAILED) {
              // @ts-ignore
              if (input.length > peg$currPos) {
                // @ts-ignore
                s5 = input.charAt(peg$currPos);
                // @ts-ignore
                peg$currPos++;
                // @ts-ignore
              } else {
                // @ts-ignore
                s5 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e75);
                }
              }
              // @ts-ignore
              if (s5 !== peg$FAILED) {
                // @ts-ignore
                s4 = [s4, s5];
                // @ts-ignore
                s3 = s4;
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s3;
                // @ts-ignore
                s3 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s3;
              // @ts-ignore
              s3 = peg$FAILED;
            }
          }
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 39) {
            // @ts-ignore
            s3 = peg$c50;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e74);
            }
          }
          // @ts-ignore
          if (s3 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f46(s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e73);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseAddress() {
        // @ts-ignore
        var s0, s1, s2, s3, s4, s5;

        // @ts-ignore
        var key = peg$currPos * 79 + 65;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c51) {
          // @ts-ignore
          s1 = peg$c51;
          // @ts-ignore
          peg$currPos += 2;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e77);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseHexByte();
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            s3 = peg$parseHexByte();
            // @ts-ignore
            if (s3 !== peg$FAILED) {
              // @ts-ignore
              s4 = peg$parseHexByte();
              // @ts-ignore
              if (s4 !== peg$FAILED) {
                // @ts-ignore
                s5 = peg$parseHexByte();
                // @ts-ignore
                if (s5 !== peg$FAILED) {
                  // @ts-ignore
                  peg$savedPos = s0;
                  // @ts-ignore
                  s0 = peg$f47(s2, s3, s4, s5);
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  peg$currPos = s0;
                  // @ts-ignore
                  s0 = peg$FAILED;
                }
                // @ts-ignore
              } else {
                // @ts-ignore
                peg$currPos = s0;
                // @ts-ignore
                s0 = peg$FAILED;
              }
              // @ts-ignore
            } else {
              // @ts-ignore
              peg$currPos = s0;
              // @ts-ignore
              s0 = peg$FAILED;
            }
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e76);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePin() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        var key = peg$currPos * 79 + 66;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c52) {
          // @ts-ignore
          s1 = peg$c52;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e79);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 35) {
            // @ts-ignore
            s1 = peg$c53;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e80);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseDigit();
          // @ts-ignore
          if (s2 === peg$FAILED) {
            // @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c54) {
              // @ts-ignore
              s2 = peg$c54;
              // @ts-ignore
              peg$currPos += 2;
              // @ts-ignore
            } else {
              // @ts-ignore
              s2 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e81);
              }
            }
            // @ts-ignore
            if (s2 === peg$FAILED) {
              // @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c55) {
                // @ts-ignore
                s2 = peg$c55;
                // @ts-ignore
                peg$currPos += 2;
                // @ts-ignore
              } else {
                // @ts-ignore
                s2 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e82);
                }
              }
              // @ts-ignore
              if (s2 === peg$FAILED) {
                // @ts-ignore
                if (input.substr(peg$currPos, 2) === peg$c56) {
                  // @ts-ignore
                  s2 = peg$c56;
                  // @ts-ignore
                  peg$currPos += 2;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  s2 = peg$FAILED;
                  // @ts-ignore
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e83);
                  }
                }
                // @ts-ignore
                if (s2 === peg$FAILED) {
                  // @ts-ignore
                  if (input.substr(peg$currPos, 2) === peg$c57) {
                    // @ts-ignore
                    s2 = peg$c57;
                    // @ts-ignore
                    peg$currPos += 2;
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    s2 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e84);
                    }
                  }
                  // @ts-ignore
                  if (s2 === peg$FAILED) {
                    // @ts-ignore
                    if (input.substr(peg$currPos, 2) === peg$c58) {
                      // @ts-ignore
                      s2 = peg$c58;
                      // @ts-ignore
                      peg$currPos += 2;
                      // @ts-ignore
                    } else {
                      // @ts-ignore
                      s2 = peg$FAILED;
                      // @ts-ignore
                      if (peg$silentFails === 0) {
                        peg$fail(peg$e85);
                      }
                    }
                    // @ts-ignore
                    if (s2 === peg$FAILED) {
                      // @ts-ignore
                      if (input.substr(peg$currPos, 2) === peg$c59) {
                        // @ts-ignore
                        s2 = peg$c59;
                        // @ts-ignore
                        peg$currPos += 2;
                        // @ts-ignore
                      } else {
                        // @ts-ignore
                        s2 = peg$FAILED;
                        // @ts-ignore
                        if (peg$silentFails === 0) {
                          peg$fail(peg$e86);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f48(s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e78);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseLabelText() {
        // @ts-ignore
        var s0, s1, s2, s3;

        // @ts-ignore
        var key = peg$currPos * 79 + 67;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (peg$r8.test(input.charAt(peg$currPos))) {
          // @ts-ignore
          s1 = input.charAt(peg$currPos);
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e87);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = [];
          // @ts-ignore
          if (peg$r9.test(input.charAt(peg$currPos))) {
            // @ts-ignore
            s3 = input.charAt(peg$currPos);
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s3 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e88);
            }
          }
          // @ts-ignore
          while (s3 !== peg$FAILED) {
            // @ts-ignore
            s2.push(s3);
            // @ts-ignore
            if (peg$r9.test(input.charAt(peg$currPos))) {
              // @ts-ignore
              s3 = input.charAt(peg$currPos);
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s3 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e88);
              }
            }
          }
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s0 = peg$f49();
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseDefineLabel() {
        // @ts-ignore
        var s0, s1, s2;

        // @ts-ignore
        var key = peg$currPos * 79 + 68;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 64) {
          // @ts-ignore
          s1 = peg$c39;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e44);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseLabelText();
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f50(s2);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseLabel() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 69;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseLabelText();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f51(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIdentifier() {
        // @ts-ignore
        var s0, s1, s2, s3, s4;

        // @ts-ignore
        var key = peg$currPos * 79 + 70;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.charCodeAt(peg$currPos) === 36) {
          // @ts-ignore
          s1 = peg$c60;
          // @ts-ignore
          peg$currPos++;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e90);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          s2 = peg$parseIdentifierChar();
          // @ts-ignore
          if (s2 !== peg$FAILED) {
            // @ts-ignore
            s3 = [];
            // @ts-ignore
            s4 = peg$parseIdentifierChar();
            // @ts-ignore
            while (s4 !== peg$FAILED) {
              // @ts-ignore
              s3.push(s4);
              // @ts-ignore
              s4 = peg$parseIdentifierChar();
            }
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s0 = peg$f52(s2, s3);
            // @ts-ignore
          } else {
            // @ts-ignore
            peg$currPos = s0;
            // @ts-ignore
            s0 = peg$FAILED;
          }
          // @ts-ignore
        } else {
          // @ts-ignore
          peg$currPos = s0;
          // @ts-ignore
          s0 = peg$FAILED;
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e89);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseIdentifierChar() {
        // @ts-ignore
        var s0;

        // @ts-ignore
        var key = peg$currPos * 79 + 71;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$parseAlphanumeric();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 36) {
            // @ts-ignore
            s0 = peg$c60;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s0 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e90);
            }
          }
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            if (input.charCodeAt(peg$currPos) === 95) {
              // @ts-ignore
              s0 = peg$c61;
              // @ts-ignore
              peg$currPos++;
              // @ts-ignore
            } else {
              // @ts-ignore
              s0 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e91);
              }
            }
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseUseIdentifier() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 72;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        s1 = peg$parseIdentifier();
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f53(s1);
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePinMode() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 73;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        peg$silentFails++;
        // @ts-ignore
        s0 = peg$parsePinModeInputPullUp();
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$parsePinModeOpenDrain();
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$parsePinModeInput();
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$parsePinModeOutput();
            }
          }
        }
        // @ts-ignore
        peg$silentFails--;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e92);
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePinModeInput() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 74;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 5) === peg$c62) {
          // @ts-ignore
          s1 = peg$c62;
          // @ts-ignore
          peg$currPos += 5;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e93);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 48) {
            // @ts-ignore
            s1 = peg$c48;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e70);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f54();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePinModeOutput() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 75;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 6) === peg$c63) {
          // @ts-ignore
          s1 = peg$c63;
          // @ts-ignore
          peg$currPos += 6;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e94);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 49) {
            // @ts-ignore
            s1 = peg$c45;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e67);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f55();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePinModeOpenDrain() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 76;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 10) === peg$c64) {
          // @ts-ignore
          s1 = peg$c64;
          // @ts-ignore
          peg$currPos += 10;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e95);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 50) {
            // @ts-ignore
            s1 = peg$c65;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e96);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f56();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parsePinModeInputPullUp() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 77;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 7) === peg$c66) {
          // @ts-ignore
          s1 = peg$c66;
          // @ts-ignore
          peg$currPos += 7;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e97);
          }
        }
        // @ts-ignore
        if (s1 === peg$FAILED) {
          // @ts-ignore
          if (input.charCodeAt(peg$currPos) === 51) {
            // @ts-ignore
            s1 = peg$c67;
            // @ts-ignore
            peg$currPos++;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e98);
            }
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f57();
        }
        // @ts-ignore
        s0 = s1;

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      function // @ts-ignore
      peg$parseValueTypeMap() {
        // @ts-ignore
        var s0, s1;

        // @ts-ignore
        var key = peg$currPos * 79 + 78;
        // @ts-ignore
        var cached = peg$resultsCache[key];

        // @ts-ignore
        if (cached) {
          // @ts-ignore
          peg$currPos = cached.nextPos;

          // @ts-ignore
          return cached.result;
        }

        // @ts-ignore
        s0 = peg$currPos;
        // @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c68) {
          // @ts-ignore
          s1 = peg$c68;
          // @ts-ignore
          peg$currPos += 4;
          // @ts-ignore
        } else {
          // @ts-ignore
          s1 = peg$FAILED;
          // @ts-ignore
          if (peg$silentFails === 0) {
            peg$fail(peg$e99);
          }
        }
        // @ts-ignore
        if (s1 !== peg$FAILED) {
          // @ts-ignore
          peg$savedPos = s0;
          // @ts-ignore
          s1 = peg$f58();
        }
        // @ts-ignore
        s0 = s1;
        // @ts-ignore
        if (s0 === peg$FAILED) {
          // @ts-ignore
          s0 = peg$currPos;
          // @ts-ignore
          if (input.substr(peg$currPos, 7) === peg$c69) {
            // @ts-ignore
            s1 = peg$c69;
            // @ts-ignore
            peg$currPos += 7;
            // @ts-ignore
          } else {
            // @ts-ignore
            s1 = peg$FAILED;
            // @ts-ignore
            if (peg$silentFails === 0) {
              peg$fail(peg$e100);
            }
          }
          // @ts-ignore
          if (s1 !== peg$FAILED) {
            // @ts-ignore
            peg$savedPos = s0;
            // @ts-ignore
            s1 = peg$f59();
          }
          // @ts-ignore
          s0 = s1;
          // @ts-ignore
          if (s0 === peg$FAILED) {
            // @ts-ignore
            s0 = peg$currPos;
            // @ts-ignore
            if (input.substr(peg$currPos, 7) === peg$c70) {
              // @ts-ignore
              s1 = peg$c70;
              // @ts-ignore
              peg$currPos += 7;
              // @ts-ignore
            } else {
              // @ts-ignore
              s1 = peg$FAILED;
              // @ts-ignore
              if (peg$silentFails === 0) {
                peg$fail(peg$e101);
              }
            }
            // @ts-ignore
            if (s1 !== peg$FAILED) {
              // @ts-ignore
              peg$savedPos = s0;
              // @ts-ignore
              s1 = peg$f60();
            }
            // @ts-ignore
            s0 = s1;
            // @ts-ignore
            if (s0 === peg$FAILED) {
              // @ts-ignore
              s0 = peg$currPos;
              // @ts-ignore
              if (input.substr(peg$currPos, 4) === peg$c71) {
                // @ts-ignore
                s1 = peg$c71;
                // @ts-ignore
                peg$currPos += 4;
                // @ts-ignore
              } else {
                // @ts-ignore
                s1 = peg$FAILED;
                // @ts-ignore
                if (peg$silentFails === 0) {
                  peg$fail(peg$e102);
                }
              }
              // @ts-ignore
              if (s1 !== peg$FAILED) {
                // @ts-ignore
                peg$savedPos = s0;
                // @ts-ignore
                s1 = peg$f61();
              }
              // @ts-ignore
              s0 = s1;
              // @ts-ignore
              if (s0 === peg$FAILED) {
                // @ts-ignore
                s0 = peg$currPos;
                // @ts-ignore
                if (input.substr(peg$currPos, 3) === peg$c72) {
                  // @ts-ignore
                  s1 = peg$c72;
                  // @ts-ignore
                  peg$currPos += 3;
                  // @ts-ignore
                } else {
                  // @ts-ignore
                  s1 = peg$FAILED;
                  // @ts-ignore
                  if (peg$silentFails === 0) {
                    peg$fail(peg$e103);
                  }
                }
                // @ts-ignore
                if (s1 !== peg$FAILED) {
                  // @ts-ignore
                  peg$savedPos = s0;
                  // @ts-ignore
                  s1 = peg$f62();
                }
                // @ts-ignore
                s0 = s1;
                // @ts-ignore
                if (s0 === peg$FAILED) {
                  // @ts-ignore
                  s0 = peg$currPos;
                  // @ts-ignore
                  if (input.substr(peg$currPos, 6) === peg$c73) {
                    // @ts-ignore
                    s1 = peg$c73;
                    // @ts-ignore
                    peg$currPos += 6;
                    // @ts-ignore
                  } else {
                    // @ts-ignore
                    s1 = peg$FAILED;
                    // @ts-ignore
                    if (peg$silentFails === 0) {
                      peg$fail(peg$e104);
                    }
                  }
                  // @ts-ignore
                  if (s1 !== peg$FAILED) {
                    // @ts-ignore
                    peg$savedPos = s0;
                    // @ts-ignore
                    s1 = peg$f63();
                  }
                  // @ts-ignore
                  s0 = s1;
                }
              }
            }
          }
        }

        // @ts-ignore
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

        // @ts-ignore
        return s0;
      }

      // @ts-ignore
      peg$result = peg$startRuleFunction();

      // @ts-ignore
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        // @ts-ignore
        return peg$result;
        // @ts-ignore
      } else {
        // @ts-ignore
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          // @ts-ignore
          peg$fail(peg$endExpectation());
        }

        // @ts-ignore
        throw peg$buildStructuredError(
          // @ts-ignore
          peg$maxFailExpected,
          // @ts-ignore
          peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
          // @ts-ignore
          peg$maxFailPos < input.length
            ? // @ts-ignore
              peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : // @ts-ignore
              peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
        );
      }
    }

    // @ts-ignore
    return {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse,
    };
  })();

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: 'literal';
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: 'class';
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: 'any';
}

export interface EndExpectation {
  type: 'end';
}

export interface OtherExpectation {
  type: 'other';
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(
    sources: {
      source?: any;
      text: string;
    }[],
  ): string;
}

export interface TraceEvent {
  type: string;
  rule: string;
  result?: any;
  location: FileRange;
}

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = 'PeggySyntaxError';

export interface ParseOptions {
  filename?: string;
  startRule?: 'Program';
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
  input: string,
  options?: Options,
) => Options extends { startRule: infer StartRule } ? (StartRule extends 'Program' ? Program : Program) : Program;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type IoInstruction = IoWrite | IoRead | IoMode | IoType | IoAllOut;
export type IoWrite = any;
export type IoRead = any;
export type IoMode = any;
export type IoType = any;
export type IoAllOut = any;
export type IoValue = ByteValue | IdentifierValue | BooleanValue;
export type MemoryInstruction = MemoryGet | MemorySet | MemoryCopy;
export type MemoryCopy = any;
export type MemoryGet = any;
export type MemorySet = any;
export type Program = Line[];
export type Line = Statement;
export type StatementSeparator = (NewLine | null) | (';' | null);
export type Statement = DefineLabel | SystemInstruction | MemoryInstruction | Operator | IoInstruction | Comment;
export type Comment = [];
export type Operator = BinaryOperation | UnaryOperation | DeclareIdentifier | Assign;
export type ASSIGN = '=';
export type Assign = any;
export type UnaryOperation = Not | Step;
export type Not = any;
export type Step = any;
export type BinaryOperation = any;
export type BinaryOperator = '>=' | '>' | '<=' | '<' | '==' | '!=' | 'xor' | 'and' | 'or' | '+' | '-' | '*' | '/' | '%';
export type DeclareIdentifier = any;
export type IdentifierValue = any;
export type PinValue = any;
export type BooleanValue = any;
export type ByteValue = any;
export type AddressValue = any;
export type IntegerValue = any;
export type SignedIntegerValue = any;
export type StringValue = any;
export type NullValue = any;
export type NumberValue = IntegerValue | SignedIntegerValue;
export type Value = IdentifierValue | ByteValue | AddressValue | NumberValue | StringValue | BooleanValue | NullValue;
export type IntrinsicValue = ByteValue | NumberValue | StringValue | BooleanValue | NullValue;
export type SystemInstruction = Halt | Restart | SystemInfo | Debug | Dump | Noop | Print | JumpTo | JumpIf | Delay;
export type Halt = any;
export type Restart = any;
export type Noop = any;
export type SystemInfo = any;
export type Dump = any;
export type Debug = any;
export type Print = any;
export type Delay = any;
export type JumpTo = any;
export type JumpIf = any;
export type HexDigit = string;
export type HexByte = string;
export type Byte = number;
export type Space = string;
export type Spaces = Space[];
export type NewLine = string[];
export type Separator = [',', Spaces];
export type Digit = string;
export type NonZeroDigit = string;
export type Alpha = string;
export type Alphanumeric = string;
export type True = 1;
export type False = 0;
export type Boolean_1 = True | False;
export type Integer = 0 | number;
export type SignedInteger = number;
export type String_1 = string[];
export type Address = number;
export type Pin = number;
export type LabelText = string;
export type DefineLabel = any;
export type Label = any;
export type Identifier = string;
export type IdentifierChar = Alphanumeric | '$' | '_';
export type UseIdentifier = any;
export type PinMode = PinModeInputPullUp | PinModeOpenDrain | PinModeInput | PinModeOutput;
export type PinModeInput = 0;
export type PinModeOutput = 1;
export type PinModeOpenDrain = 2;
export type PinModeInputPullUp = 3;
export type ValueTypeMap = any;
